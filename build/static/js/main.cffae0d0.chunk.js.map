{"version":3,"sources":["list-selector.js","parade-queue.js","parade-route.js","card-on-display.js","app.js","serviceWorker.js","index.js"],"names":["ListSelector","_ref","lists","onChange","react_default","a","createElement","className","name","value","map","list","key","id","ParadeQueue","_this","this","cards","cardOnDisplay","onSelect","card","concat","href","onClick","bind","ParadeRoute","parade_queue","ytRegEx","movRegEx","getYTId","url","ytid","URL","searchParams","get","match","split","slice","PresentingLive","CardOnDisplay","movAttachment","ytAttachment","_","find","attachments","attachment","test","desc","console","log","Fragment","title","src","frameBorder","allow","allowFullScreen","ReactPlayer_default","playing","controls","width","height","t","window","TrelloPowerUp","iframe","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedList","_this2","then","setState","evt","currentTarget","cardsOnDisplay","card_on_display","list_selector","onListSelect","parade_route","onCardSelect","Component","Boolean","location","hostname","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cffae0d0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ListSelector({ lists, onChange }) {\n  return (\n    <div className=\"list-selector\">\n      <select name=\"selected-list\" onChange={onChange} >\n        <option value=\"\">Select a list to present...</option>\n        { lists.map(list => <option key={list.id} value={list.id}>{list.name}</option>) }\n      </select>\n    </div>\n  );\n}\n\nexport default ListSelector;\n","import React from 'react';\n\nfunction ParadeQueue({ cards, cardOnDisplay,  onSelect }) {\n  return (\n    <ul className=\"parade-queue\">\n      {cards.map(card => {\n        return <li key={card.id} className={`card ${cardOnDisplay && card.id === cardOnDisplay.id ? 'selected-card' : ''}`}>\n          <a href={`#${card.id}`} onClick={onSelect.bind(this, card)}>{card.name}</a>\n        </li>;\n      })}\n    </ul>\n  );\n}\n\nexport default ParadeQueue;\n","import React from 'react';\nimport ParadeQueue from './parade-queue';\n\nfunction ParadeRoute({ cards, onSelect, cardOnDisplay }) {\n  return (\n    <div className=\"parade-route box\">\n      <ParadeQueue cards={cards} onSelect={onSelect} cardOnDisplay={cardOnDisplay} />\n    </div>\n  );\n}\n\nexport default ParadeRoute;\n","import React from 'react';\nimport _ from 'lodash';\nimport ReactPlayer from 'react-player'\n\nconst ytRegEx = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/(.+)$/sim;\nconst movRegEx = /^https:\\/\\/trello-attachments\\.s3\\.amazonaws\\.com\\/(.+).(mov|mp4|ogv|webm|m3u8|mpd)$/;\n\nfunction getYTId(url) {\n  let ytid;\n  const params = new URL(url);\n  ytid = params.searchParams.get('v');\n  if (!ytid) {\n    ytid = url.match(ytRegEx)[4];\n    ytid = ytid ? ytid.split('=').slice(-1)[0] : null;\n  }\n  return ytid;\n}\n\nfunction PresentingLive() {\n  return (\n    <div className=\"row center-xs middle-xs presenting-live\">\n      <div className=\"col-xs-6\">\n        <div className=\"box\">\n          No video attached. Presenting live!\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction CardOnDisplay({ card }) {\n  let ytid, movAttachment;\n  \n  // Look in attachments first\n  const ytAttachment = _.find(card.attachments, attachment => ytRegEx.test(attachment.url));  \n  if (ytAttachment) {\n    ytid = getYTId(ytAttachment.url);\n  }\n  \n  // Can't find in attachments... look in description\n  if (!ytid) {\n    const url = ytRegEx.test(card.desc) ? card.desc.match(ytRegEx)[0] : null;\n    ytid = url ? getYTId(url) : null;\n  }\n  \n  // TODO add support for mov/mp4\n  if (!ytid) {\n    movAttachment = _.find(card.attachments, attachment => movRegEx.test(attachment.url));  \n  };\n  console.log(ytid, movAttachment);\n    \n  return (\n    <>\n      { ytid && !movAttachment ?\n        <iframe \n          className=\"vid\"\n          title={card.name}\n          src={`https://www.youtube.com/embed/${ytid}?autoplay=1`}\n          frameBorder=\"0\" \n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture; fullscreen\" \n          allowFullScreen /> : (!ytid && movAttachment ?\n            <ReactPlayer\n              url={movAttachment.url}\n              playing\n              controls\n              width=\"100%\"\n              height=\"100%\"\n            /> : <PresentingLive />)\n      }\n    </>\n  );\n}\n\nexport default CardOnDisplay;\n","import React, { Component } from 'react';\nimport { find } from 'lodash';\nimport ListSelector from './list-selector';\nimport ParadeRoute from './parade-route';\nimport CardOnDisplay from './card-on-display';\nimport './app.css';\n\nconst t = window.TrelloPowerUp.iframe();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lists: [],\n      selectedList: null,\n      cards: [],\n      cardOnDisplay: null,\n    };\n  }\n  \n  componentDidMount() {\n    t.lists('all')\n      .then(lists => this.setState({lists}));\n  }\n  \n  onListSelect(evt) {\n    if (evt.currentTarget.value) {\n      const list = find(this.state.lists, { id: evt.currentTarget.value })\n      this.setState({ \n        selectedList: evt.currentTarget.value,\n        cards: list.cards,\n      });\n    } else {\n      this.setState({ \n        selectedList: null,\n        cards: [],\n        cardsOnDisplay: null,\n      });\n    }\n  }\n  \n  onCardSelect(card) {\n    this.setState({ cardOnDisplay: card });\n  }\n  \n  render() {\n    return (\n      <div className=\"app row\">\n        <div className=\"card-on-display col-xs-9\">\n          { this.state.cardOnDisplay ? <CardOnDisplay card={this.state.cardOnDisplay} /> : null }\n        </div>\n        <div className=\"sidebar col-xs-3\">\n          <ListSelector \n            lists={this.state.lists}\n            cardOnDisplay={this.state.cardOnDisplay}\n            onChange={this.onListSelect.bind(this)}\n          /> \n          <ParadeRoute \n            cards={this.state.cards} \n            onSelect={this.onCardSelect.bind(this)}\n            cardOnDisplay={this.state.cardOnDisplay}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}